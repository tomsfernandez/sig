// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191106162749_rejection")]
    partial class rejection
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Models.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Street");

                    b.Property<string>("StreetHeight");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Traceytown",
                            Country = "United Arab Emirates",
                            Street = "Luella Track",
                            StreetHeight = "45468"
                        },
                        new
                        {
                            Id = 2L,
                            City = "Rosenbaumburgh",
                            Country = "Lebanon",
                            Street = "Hessel Pine",
                            StreetHeight = "3230"
                        },
                        new
                        {
                            Id = 3L,
                            City = "Vivianton",
                            Country = "Burundi",
                            Street = "Kuhlman Station",
                            StreetHeight = "488"
                        },
                        new
                        {
                            Id = 4L,
                            City = "North Marianneville",
                            Country = "Qatar",
                            Street = "Isac Orchard",
                            StreetHeight = "969"
                        },
                        new
                        {
                            Id = 5L,
                            City = "Lake Ellieborough",
                            Country = "Trinidad and Tobago",
                            Street = "Anya Prairie",
                            StreetHeight = "5989"
                        },
                        new
                        {
                            Id = 6L,
                            City = "South Alvenastad",
                            Country = "Palestinian Territory",
                            Street = "Kozey Corner",
                            StreetHeight = "625"
                        },
                        new
                        {
                            Id = 7L,
                            City = "Port Stephon",
                            Country = "Central African Republic",
                            Street = "Parker Cliffs",
                            StreetHeight = "729"
                        },
                        new
                        {
                            Id = 8L,
                            City = "South Gersonborough",
                            Country = "Liechtenstein",
                            Street = "Julian Path",
                            StreetHeight = "27238"
                        },
                        new
                        {
                            Id = 9L,
                            City = "North Cliffordhaven",
                            Country = "Saint Pierre and Miquelon",
                            Street = "Kihn Mill",
                            StreetHeight = "691"
                        },
                        new
                        {
                            Id = 10L,
                            City = "Saraihaven",
                            Country = "Turkmenistan",
                            Street = "Caitlyn Prairie",
                            StreetHeight = "48151"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AddressId");

                    b.Property<string>("BusinessName");

                    b.Property<string>("Cuit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 1L,
                            BusinessName = "Bartell - Breitenberg",
                            Cuit = "29160167"
                        },
                        new
                        {
                            Id = 2L,
                            AddressId = 2L,
                            BusinessName = "Muller Group",
                            Cuit = "45648427"
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 3L,
                            BusinessName = "Schumm - Raynor",
                            Cuit = "22662460"
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 4L,
                            BusinessName = "Kertzmann, Blanda and White",
                            Cuit = "34347744"
                        },
                        new
                        {
                            Id = 5L,
                            AddressId = 5L,
                            BusinessName = "Maggio, Gibson and Schulist",
                            Cuit = "32157437"
                        },
                        new
                        {
                            Id = 6L,
                            AddressId = 6L,
                            BusinessName = "Terry and Sons",
                            Cuit = "53803436"
                        },
                        new
                        {
                            Id = 7L,
                            AddressId = 7L,
                            BusinessName = "Kuvalis - Price",
                            Cuit = "65901205"
                        },
                        new
                        {
                            Id = 8L,
                            AddressId = 8L,
                            BusinessName = "Price Group",
                            Cuit = "62448345"
                        },
                        new
                        {
                            Id = 9L,
                            AddressId = 9L,
                            BusinessName = "Rice, Farrell and Luettgen",
                            Cuit = "31471534"
                        },
                        new
                        {
                            Id = 10L,
                            AddressId = 10L,
                            BusinessName = "Gusikowski - Carroll",
                            Cuit = "10518212"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Dock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Occupied");

                    b.HasKey("Id");

                    b.ToTable("Dock");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 2L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 3L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 4L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 5L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 6L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 7L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 8L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 9L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 10L,
                            Occupied = false
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dni");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Dni = "106.120.104.74",
                            LastName = "Buckridge",
                            Name = "Grayson"
                        },
                        new
                        {
                            Id = 2L,
                            Dni = "210.88.219.113",
                            LastName = "Weber",
                            Name = "Charlene"
                        },
                        new
                        {
                            Id = 3L,
                            Dni = "14.171.209.70",
                            LastName = "Grady",
                            Name = "Bud"
                        },
                        new
                        {
                            Id = 4L,
                            Dni = "91.131.84.9",
                            LastName = "Monahan",
                            Name = "Natasha"
                        },
                        new
                        {
                            Id = 5L,
                            Dni = "163.102.164.125",
                            LastName = "Trantow",
                            Name = "Claude"
                        },
                        new
                        {
                            Id = 6L,
                            Dni = "60.8.23.84",
                            LastName = "Gleason",
                            Name = "Edgar"
                        },
                        new
                        {
                            Id = 7L,
                            Dni = "209.67.240.21",
                            LastName = "Johnston",
                            Name = "Linnie"
                        },
                        new
                        {
                            Id = 8L,
                            Dni = "63.21.56.126",
                            LastName = "Kirlin",
                            Name = "Delaney"
                        },
                        new
                        {
                            Id = 9L,
                            Dni = "95.201.107.232",
                            LastName = "Runte",
                            Name = "Jaylan"
                        },
                        new
                        {
                            Id = 10L,
                            Dni = "198.96.185.204",
                            LastName = "Zulauf",
                            Name = "Madelyn"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverPermit");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DriverId = 1L,
                            ExpirationDate = new DateTime(2020, 3, 20, 20, 40, 21, 436, DateTimeKind.Local).AddTicks(1829),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DriverId = 2L,
                            ExpirationDate = new DateTime(2020, 5, 31, 14, 18, 37, 833, DateTimeKind.Local).AddTicks(105),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            DriverId = 3L,
                            ExpirationDate = new DateTime(2019, 12, 13, 16, 11, 23, 796, DateTimeKind.Local).AddTicks(1598),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            DriverId = 4L,
                            ExpirationDate = new DateTime(2020, 1, 28, 9, 42, 43, 69, DateTimeKind.Local).AddTicks(8566),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            DriverId = 5L,
                            ExpirationDate = new DateTime(2020, 2, 5, 4, 16, 28, 319, DateTimeKind.Local).AddTicks(9386),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            DriverId = 6L,
                            ExpirationDate = new DateTime(2020, 2, 24, 2, 3, 5, 67, DateTimeKind.Local).AddTicks(4699),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            DriverId = 7L,
                            ExpirationDate = new DateTime(2020, 3, 5, 5, 42, 49, 454, DateTimeKind.Local).AddTicks(4635),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            DriverId = 8L,
                            ExpirationDate = new DateTime(2020, 10, 31, 17, 37, 31, 21, DateTimeKind.Local).AddTicks(2901),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            DriverId = 9L,
                            ExpirationDate = new DateTime(2020, 9, 20, 7, 55, 33, 411, DateTimeKind.Local).AddTicks(7159),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            DriverId = 10L,
                            ExpirationDate = new DateTime(2020, 1, 28, 18, 55, 37, 112, DateTimeKind.Local).AddTicks(2718),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime?>("EntryDate");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<string>("RejectionText");

                    b.Property<long>("RemittanceId");

                    b.Property<long>("TrailerId");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BoxHeight");

                    b.Property<double>("BoxLength");

                    b.Property<double>("BoxWeight");

                    b.Property<double>("BoxWidth");

                    b.Property<string>("Description");

                    b.Property<int>("DownloadedPallets");

                    b.Property<string>("ExternCode");

                    b.Property<long>("RemittanceId");

                    b.Property<int>("RequestedPallets");

                    b.Property<int>("TotalBoxes");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("Merchandise");
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverageType");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<string>("InsuredMerchandise");

                    b.Property<int>("PolicyNumber");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("SafetyMeasures");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("MerchandiseInsurance");
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("DockId");

                    b.Property<DateTime>("DownloadFinishedAt");

                    b.Property<DateTime>("DownloadStartedAt");

                    b.Property<long>("EntryId");

                    b.Property<string>("MerchandiseState");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("RemittanceState");

                    b.HasKey("Id");

                    b.HasIndex("DockId");

                    b.HasIndex("EntryId");

                    b.HasIndex("RemittanceId")
                        .IsUnique();

                    b.ToTable("OperationState");
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfBoxes");

                    b.Property<DateTime>("EntryTimestamp");

                    b.Property<DateTime>("ExitTimestamp");

                    b.Property<double>("Height");

                    b.Property<long>("MerchandiseId");

                    b.Property<string>("State");

                    b.Property<long?>("WarehouseLocationId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("Pallet");
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertifiedBy");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("RTO");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 25, 2, 37, 6, 817, DateTimeKind.Local).AddTicks(5688),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 11, 29, 21, 39, 31, 319, DateTimeKind.Local).AddTicks(6888),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 1, 19, 22, 44, 52, 179, DateTimeKind.Local).AddTicks(9012),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 11, 15, 20, 30, 50, 616, DateTimeKind.Local).AddTicks(7169),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 3, 16, 0, 9, 1, 349, DateTimeKind.Local).AddTicks(3010),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 2, 21, 2, 27, 53, 599, DateTimeKind.Local).AddTicks(3436),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 11, 30, 10, 26, 34, 211, DateTimeKind.Local).AddTicks(6709),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 10, 19, 2, 24, 6, 68, DateTimeKind.Local).AddTicks(1325),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 1, 27, 21, 51, 35, 808, DateTimeKind.Local).AddTicks(276),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 3, 21, 2, 39, 42, 990, DateTimeKind.Local).AddTicks(5927),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RUTA");
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DeliveryType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Remittance");
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LicensePlate");

                    b.Property<long>("TrailerInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("TrailerInsuranceId");

                    b.ToTable("Trailer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LicensePlate = "16358-7422",
                            TrailerInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LicensePlate = "96483-1254",
                            TrailerInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            LicensePlate = "11610-0508",
                            TrailerInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            LicensePlate = "69841",
                            TrailerInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            LicensePlate = "47816-7470",
                            TrailerInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            LicensePlate = "29663",
                            TrailerInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            LicensePlate = "66499-1472",
                            TrailerInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            LicensePlate = "30198",
                            TrailerInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            LicensePlate = "63747-3237",
                            TrailerInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            LicensePlate = "10853-1973",
                            TrailerInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.TrailerInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("TrailerInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 1, 7, 23, 16, 7, 440, DateTimeKind.Local).AddTicks(4521),
                            InsuranceBusinessName = "Leuschke Group",
                            PolicyNumber = 96512043
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 5, 7, 19, 58, 30, 67, DateTimeKind.Local).AddTicks(599),
                            InsuranceBusinessName = "Gorczany - Leuschke",
                            PolicyNumber = 33517780
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 9, 24, 14, 44, 48, 695, DateTimeKind.Local).AddTicks(5754),
                            InsuranceBusinessName = "Ledner Inc",
                            PolicyNumber = 16571426
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2019, 12, 13, 22, 18, 46, 757, DateTimeKind.Local).AddTicks(899),
                            InsuranceBusinessName = "Kilback, Glover and Block",
                            PolicyNumber = 11828204
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 4, 2, 5, 57, 8, 493, DateTimeKind.Local).AddTicks(9385),
                            InsuranceBusinessName = "Weber - Moore",
                            PolicyNumber = 82703424
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 4, 10, 8, 18, 33, 297, DateTimeKind.Local).AddTicks(3430),
                            InsuranceBusinessName = "Gusikowski - Boyer",
                            PolicyNumber = 58549988
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2019, 12, 10, 9, 40, 13, 228, DateTimeKind.Local).AddTicks(6222),
                            InsuranceBusinessName = "Bosco - Feeney",
                            PolicyNumber = 13349622
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 6, 4, 5, 44, 59, 38, DateTimeKind.Local).AddTicks(3189),
                            InsuranceBusinessName = "Jast Group",
                            PolicyNumber = 57533971
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2019, 11, 8, 20, 47, 18, 863, DateTimeKind.Local).AddTicks(9183),
                            InsuranceBusinessName = "Waters - Satterfield",
                            PolicyNumber = 73337188
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 1, 8, 12, 2, 41, 191, DateTimeKind.Local).AddTicks(5310),
                            InsuranceBusinessName = "Little - Lebsack",
                            PolicyNumber = 40478562
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("Model");

                    b.Property<string>("Type");

                    b.Property<long>("VehicleInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInsuranceId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Brand = "Mercedes Benz",
                            LicensePlate = "55960-6455",
                            Model = "El Camino",
                            Type = "SUV",
                            VehicleInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Brand = "Hyandai",
                            LicensePlate = "15533-5349",
                            Model = "F-150",
                            Type = "Minivan",
                            VehicleInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Brand = "Land Rover",
                            LicensePlate = "04069-0586",
                            Model = "Taurus",
                            Type = "Convertible",
                            VehicleInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Brand = "Honda",
                            LicensePlate = "39587-7972",
                            Model = "Wrangler",
                            Type = "Crew Cab Pickup",
                            VehicleInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Brand = "Cadillac",
                            LicensePlate = "74459",
                            Model = "Aventador",
                            Type = "Sedan",
                            VehicleInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Brand = "Kia",
                            LicensePlate = "05901-0052",
                            Model = "PT Cruiser",
                            Type = "Extended Cab Pickup",
                            VehicleInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Brand = "Hyandai",
                            LicensePlate = "39083",
                            Model = "Fiesta",
                            Type = "Minivan",
                            VehicleInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Brand = "Dodge",
                            LicensePlate = "07720",
                            Model = "A4",
                            Type = "SUV",
                            VehicleInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Brand = "Audi",
                            LicensePlate = "83680-9769",
                            Model = "Focus",
                            Type = "Crew Cab Pickup",
                            VehicleInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            Brand = "Fiat",
                            LicensePlate = "85505",
                            Model = "Accord",
                            Type = "Sedan",
                            VehicleInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.VehicleInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("VehicleInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 9, 23, 0, 52, 10, 534, DateTimeKind.Local).AddTicks(8295),
                            InsuranceBusinessName = "Hoppe, Lueilwitz and Klocko",
                            PolicyNumber = 43192182
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2019, 12, 21, 3, 44, 42, 622, DateTimeKind.Local).AddTicks(3714),
                            InsuranceBusinessName = "Crist Inc",
                            PolicyNumber = 32897630
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 10, 15, 15, 21, 11, 439, DateTimeKind.Local).AddTicks(6035),
                            InsuranceBusinessName = "Aufderhar - Monahan",
                            PolicyNumber = 44353599
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2020, 3, 7, 13, 37, 58, 853, DateTimeKind.Local).AddTicks(537),
                            InsuranceBusinessName = "Bergstrom - Schumm",
                            PolicyNumber = 62228060
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 2, 15, 17, 47, 51, 383, DateTimeKind.Local).AddTicks(8254),
                            InsuranceBusinessName = "Langworth - Sporer",
                            PolicyNumber = 55288507
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 2, 12, 14, 53, 29, 391, DateTimeKind.Local).AddTicks(7134),
                            InsuranceBusinessName = "Anderson - Kerluke",
                            PolicyNumber = 27485514
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 2, 26, 7, 15, 22, 90, DateTimeKind.Local).AddTicks(8785),
                            InsuranceBusinessName = "Murray - Champlin",
                            PolicyNumber = 46565730
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2019, 12, 11, 10, 57, 36, 341, DateTimeKind.Local).AddTicks(7726),
                            InsuranceBusinessName = "Morar - Boyle",
                            PolicyNumber = 9734630
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 9, 30, 16, 3, 12, 517, DateTimeKind.Local).AddTicks(571),
                            InsuranceBusinessName = "Medhurst - Schneider",
                            PolicyNumber = 30579415
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2019, 12, 30, 18, 50, 55, 689, DateTimeKind.Local).AddTicks(2498),
                            InsuranceBusinessName = "Bahringer Inc",
                            PolicyNumber = 21522024
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.WarehouseLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aisle");

                    b.Property<string>("Level");

                    b.Property<string>("Position");

                    b.Property<string>("Section");

                    b.HasKey("Id");

                    b.ToTable("WarehouseLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.HasOne("Web.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany("Merchandise")
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.HasOne("Web.Models.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockId");

                    b.HasOne("Web.Models.Domain.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithOne("OperationState")
                        .HasForeignKey("Web.Models.Domain.OperationState", "RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.HasOne("Web.Models.Domain.Merchandise", "Merchandise")
                        .WithMany("Pallets")
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.WarehouseLocation", "WarehouseLocation")
                        .WithMany()
                        .HasForeignKey("WarehouseLocationId");
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.HasOne("Web.Models.Domain.TrailerInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("TrailerInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.HasOne("Web.Models.Domain.VehicleInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("VehicleInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
