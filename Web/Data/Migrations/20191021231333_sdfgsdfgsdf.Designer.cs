// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191021231333_sdfgsdfgsdf")]
    partial class sdfgsdfgsdf
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Models.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Street");

                    b.Property<string>("StreetHeight");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Helenland",
                            Country = "Palestinian Territory",
                            Street = "Predovic Shoals",
                            StreetHeight = "842"
                        },
                        new
                        {
                            Id = 2L,
                            City = "East Nathanaelborough",
                            Country = "New Zealand",
                            Street = "Hagenes Hollow",
                            StreetHeight = "2938"
                        },
                        new
                        {
                            Id = 3L,
                            City = "New Newton",
                            Country = "Turks and Caicos Islands",
                            Street = "Hans Plaza",
                            StreetHeight = "82992"
                        },
                        new
                        {
                            Id = 4L,
                            City = "Thielland",
                            Country = "Armenia",
                            Street = "Barton Islands",
                            StreetHeight = "519"
                        },
                        new
                        {
                            Id = 5L,
                            City = "Reeceborough",
                            Country = "Antarctica (the territory South of 60 deg S)",
                            Street = "Adella Village",
                            StreetHeight = "3543"
                        },
                        new
                        {
                            Id = 6L,
                            City = "O'Reillybury",
                            Country = "Albania",
                            Street = "Volkman Spurs",
                            StreetHeight = "270"
                        },
                        new
                        {
                            Id = 7L,
                            City = "South Jazlyn",
                            Country = "Poland",
                            Street = "Una Alley",
                            StreetHeight = "116"
                        },
                        new
                        {
                            Id = 8L,
                            City = "New Edyth",
                            Country = "Suriname",
                            Street = "Shemar Greens",
                            StreetHeight = "6746"
                        },
                        new
                        {
                            Id = 9L,
                            City = "East Lukasport",
                            Country = "Albania",
                            Street = "Monserrate Garden",
                            StreetHeight = "268"
                        },
                        new
                        {
                            Id = 10L,
                            City = "Julianport",
                            Country = "Seychelles",
                            Street = "Hettinger Ramp",
                            StreetHeight = "1322"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AddressId");

                    b.Property<string>("BusinessName");

                    b.Property<string>("Cuit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 1L,
                            BusinessName = "O'Kon - Treutel",
                            Cuit = "57135663"
                        },
                        new
                        {
                            Id = 2L,
                            AddressId = 2L,
                            BusinessName = "Goyette - Gutmann",
                            Cuit = "48389471"
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 3L,
                            BusinessName = "Graham, Osinski and Hessel",
                            Cuit = "89200452"
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 4L,
                            BusinessName = "Walsh, Stamm and Will",
                            Cuit = "38701221"
                        },
                        new
                        {
                            Id = 5L,
                            AddressId = 5L,
                            BusinessName = "Wisoky Inc",
                            Cuit = "22879349"
                        },
                        new
                        {
                            Id = 6L,
                            AddressId = 6L,
                            BusinessName = "Koch, Armstrong and Gottlieb",
                            Cuit = "95788340"
                        },
                        new
                        {
                            Id = 7L,
                            AddressId = 7L,
                            BusinessName = "Braun LLC",
                            Cuit = "34545195"
                        },
                        new
                        {
                            Id = 8L,
                            AddressId = 8L,
                            BusinessName = "Lang LLC",
                            Cuit = "97256328"
                        },
                        new
                        {
                            Id = 9L,
                            AddressId = 9L,
                            BusinessName = "Carroll Inc",
                            Cuit = "94863291"
                        },
                        new
                        {
                            Id = 10L,
                            AddressId = 10L,
                            BusinessName = "Heathcote Group",
                            Cuit = "70868739"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Dock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Occupied");

                    b.HasKey("Id");

                    b.ToTable("Dock");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 2L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 3L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 4L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 5L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 6L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 7L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 8L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 9L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 10L,
                            Occupied = false
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dni");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Dni = "77.102.55.124",
                            LastName = "Wiegand",
                            Name = "Loy"
                        },
                        new
                        {
                            Id = 2L,
                            Dni = "122.80.72.84",
                            LastName = "Carter",
                            Name = "Camron"
                        },
                        new
                        {
                            Id = 3L,
                            Dni = "114.26.93.29",
                            LastName = "Medhurst",
                            Name = "Zachery"
                        },
                        new
                        {
                            Id = 4L,
                            Dni = "227.159.217.28",
                            LastName = "Champlin",
                            Name = "Domingo"
                        },
                        new
                        {
                            Id = 5L,
                            Dni = "182.227.144.199",
                            LastName = "Spencer",
                            Name = "Seth"
                        },
                        new
                        {
                            Id = 6L,
                            Dni = "154.185.236.10",
                            LastName = "Reichel",
                            Name = "Tom"
                        },
                        new
                        {
                            Id = 7L,
                            Dni = "230.159.80.131",
                            LastName = "Hickle",
                            Name = "Felton"
                        },
                        new
                        {
                            Id = 8L,
                            Dni = "28.246.216.21",
                            LastName = "Spencer",
                            Name = "Sonya"
                        },
                        new
                        {
                            Id = 9L,
                            Dni = "100.249.222.3",
                            LastName = "Cormier",
                            Name = "Weldon"
                        },
                        new
                        {
                            Id = 10L,
                            Dni = "129.48.33.22",
                            LastName = "Rogahn",
                            Name = "Orion"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverPermit");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DriverId = 1L,
                            ExpirationDate = new DateTime(2020, 5, 11, 15, 20, 48, 513, DateTimeKind.Local).AddTicks(6832),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DriverId = 2L,
                            ExpirationDate = new DateTime(2020, 10, 10, 1, 6, 48, 348, DateTimeKind.Local).AddTicks(8749),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            DriverId = 3L,
                            ExpirationDate = new DateTime(2020, 10, 16, 12, 19, 59, 378, DateTimeKind.Local).AddTicks(954),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            DriverId = 4L,
                            ExpirationDate = new DateTime(2020, 2, 10, 19, 40, 51, 366, DateTimeKind.Local).AddTicks(7987),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            DriverId = 5L,
                            ExpirationDate = new DateTime(2020, 6, 29, 7, 36, 25, 539, DateTimeKind.Local).AddTicks(9373),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            DriverId = 6L,
                            ExpirationDate = new DateTime(2019, 12, 15, 12, 23, 17, 352, DateTimeKind.Local).AddTicks(6440),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            DriverId = 7L,
                            ExpirationDate = new DateTime(2020, 7, 19, 22, 20, 14, 475, DateTimeKind.Local).AddTicks(1861),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            DriverId = 8L,
                            ExpirationDate = new DateTime(2020, 8, 27, 16, 49, 38, 815, DateTimeKind.Local).AddTicks(8393),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            DriverId = 9L,
                            ExpirationDate = new DateTime(2020, 7, 25, 16, 7, 5, 984, DateTimeKind.Local).AddTicks(9060),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            DriverId = 10L,
                            ExpirationDate = new DateTime(2020, 3, 4, 1, 10, 7, 197, DateTimeKind.Local).AddTicks(6991),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime?>("EntryDate");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<long>("RemittanceId");

                    b.Property<long>("TrailerId");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BoxHeight");

                    b.Property<double>("BoxLength");

                    b.Property<double>("BoxWeight");

                    b.Property<double>("BoxWidth");

                    b.Property<string>("Description");

                    b.Property<string>("ExternCode");

                    b.Property<long>("RemittanceId");

                    b.Property<int>("RequestedPallets");

                    b.Property<int>("TotalBoxes");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("Merchandise");
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverageType");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<string>("InsuredMerchandise");

                    b.Property<int>("PolicyNumber");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("SafetyMeasures");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("MerchandiseInsurance");
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DockId");

                    b.Property<DateTime>("DownloadFinishedAt");

                    b.Property<DateTime>("DownloadStartedAt");

                    b.Property<long>("EntryId");

                    b.Property<string>("MerchandiseState");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("RemittanceState");

                    b.HasKey("Id");

                    b.HasIndex("DockId");

                    b.HasIndex("EntryId");

                    b.HasIndex("RemittanceId")
                        .IsUnique();

                    b.ToTable("OperationState");
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfBoxes");

                    b.Property<DateTime>("EntryTimestamp");

                    b.Property<DateTime>("ExitTimestamp");

                    b.Property<double>("Height");

                    b.Property<long>("MerchandiseId");

                    b.Property<string>("State");

                    b.Property<long>("WarehouseLocationId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("Pallet");
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertifiedBy");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("RTO");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 3, 11, 21, 19, 9, 20, DateTimeKind.Local).AddTicks(4802),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 1, 27, 20, 44, 30, 481, DateTimeKind.Local).AddTicks(4441),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 3, 21, 52, 42, 785, DateTimeKind.Local).AddTicks(6660),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 5, 30, 4, 8, 29, 511, DateTimeKind.Local).AddTicks(9850),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 8, 18, 32, 13, 867, DateTimeKind.Local).AddTicks(4843),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 10, 11, 21, 11, 37, 410, DateTimeKind.Local).AddTicks(9498),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 1, 7, 19, 20, 38, 765, DateTimeKind.Local).AddTicks(9139),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 6, 27, 1, 22, 37, 451, DateTimeKind.Local).AddTicks(8634),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 9, 25, 5, 45, 37, 521, DateTimeKind.Local).AddTicks(2586),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 24, 12, 31, 54, 163, DateTimeKind.Local).AddTicks(2211),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RUTA");
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DeliveryType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Remittance");
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LicensePlate");

                    b.Property<long>("TrailerInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("TrailerInsuranceId");

                    b.ToTable("Trailer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LicensePlate = "47332",
                            TrailerInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LicensePlate = "17566-9167",
                            TrailerInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            LicensePlate = "27382",
                            TrailerInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            LicensePlate = "16698",
                            TrailerInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            LicensePlate = "11424-1217",
                            TrailerInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            LicensePlate = "54189-1486",
                            TrailerInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            LicensePlate = "24362-0805",
                            TrailerInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            LicensePlate = "73716-4145",
                            TrailerInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            LicensePlate = "45652-9734",
                            TrailerInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            LicensePlate = "27226-6780",
                            TrailerInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.TrailerInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("TrailerInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 9, 13, 21, 32, 8, 597, DateTimeKind.Local).AddTicks(9018),
                            InsuranceBusinessName = "Huels Group",
                            PolicyNumber = 30255388
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 4, 17, 5, 5, 17, 586, DateTimeKind.Local).AddTicks(6890),
                            InsuranceBusinessName = "Schuster, Williamson and Satterfield",
                            PolicyNumber = 72119129
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 6, 28, 23, 33, 14, 247, DateTimeKind.Local).AddTicks(557),
                            InsuranceBusinessName = "Maggio Group",
                            PolicyNumber = 87607000
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2019, 12, 7, 20, 48, 53, 112, DateTimeKind.Local).AddTicks(3876),
                            InsuranceBusinessName = "Wisoky - Cremin",
                            PolicyNumber = 1829235
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 6, 1, 6, 20, 37, 516, DateTimeKind.Local).AddTicks(7334),
                            InsuranceBusinessName = "Satterfield - Prosacco",
                            PolicyNumber = 59367819
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 9, 15, 13, 26, 22, 296, DateTimeKind.Local).AddTicks(3334),
                            InsuranceBusinessName = "Lockman and Sons",
                            PolicyNumber = 54783126
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 2, 21, 6, 44, 37, 896, DateTimeKind.Local).AddTicks(8448),
                            InsuranceBusinessName = "Maggio - Schulist",
                            PolicyNumber = 51919368
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 10, 15, 12, 2, 51, 167, DateTimeKind.Local).AddTicks(9624),
                            InsuranceBusinessName = "Donnelly Inc",
                            PolicyNumber = 72670224
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 8, 8, 1, 44, 26, 888, DateTimeKind.Local).AddTicks(1894),
                            InsuranceBusinessName = "Nienow LLC",
                            PolicyNumber = 36340910
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2019, 12, 27, 22, 57, 48, 751, DateTimeKind.Local).AddTicks(5750),
                            InsuranceBusinessName = "Haley, Connelly and Schinner",
                            PolicyNumber = 64175881
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("Model");

                    b.Property<string>("Type");

                    b.Property<long>("VehicleInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInsuranceId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Brand = "Fiat",
                            LicensePlate = "10041-8672",
                            Model = "Grand Caravan",
                            Type = "Coupe",
                            VehicleInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Brand = "Maserati",
                            LicensePlate = "24179-5252",
                            Model = "LeBaron",
                            Type = "Coupe",
                            VehicleInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Brand = "Bentley",
                            LicensePlate = "78645",
                            Model = "XTS",
                            Type = "Crew Cab Pickup",
                            VehicleInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Brand = "Bugatti",
                            LicensePlate = "05168",
                            Model = "A8",
                            Type = "Extended Cab Pickup",
                            VehicleInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Brand = "Lamborghini",
                            LicensePlate = "45006-6480",
                            Model = "Alpine",
                            Type = "Extended Cab Pickup",
                            VehicleInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Brand = "Chevrolet",
                            LicensePlate = "60607",
                            Model = "Focus",
                            Type = "Sedan",
                            VehicleInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Brand = "Dodge",
                            LicensePlate = "42236-5264",
                            Model = "A8",
                            Type = "Coupe",
                            VehicleInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Brand = "Chrysler",
                            LicensePlate = "73719-0788",
                            Model = "A4",
                            Type = "Sedan",
                            VehicleInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Brand = "Nissan",
                            LicensePlate = "19802-6480",
                            Model = "Model T",
                            Type = "Passenger Van",
                            VehicleInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            Brand = "Fiat",
                            LicensePlate = "96358",
                            Model = "Sentra",
                            Type = "Crew Cab Pickup",
                            VehicleInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.VehicleInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("VehicleInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 1, 7, 13, 30, 9, 955, DateTimeKind.Local).AddTicks(2215),
                            InsuranceBusinessName = "D'Amore - Oberbrunner",
                            PolicyNumber = 36447411
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 7, 13, 12, 27, 49, 741, DateTimeKind.Local).AddTicks(8828),
                            InsuranceBusinessName = "Murazik Group",
                            PolicyNumber = 32324037
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 5, 16, 15, 14, 47, 915, DateTimeKind.Local).AddTicks(1367),
                            InsuranceBusinessName = "McKenzie, Schroeder and Stamm",
                            PolicyNumber = 39957757
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2020, 7, 26, 18, 57, 51, 32, DateTimeKind.Local).AddTicks(7101),
                            InsuranceBusinessName = "Orn - Rodriguez",
                            PolicyNumber = 16962484
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 2, 11, 7, 0, 0, 499, DateTimeKind.Local).AddTicks(8002),
                            InsuranceBusinessName = "Corwin, Romaguera and Okuneva",
                            PolicyNumber = 57680187
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 7, 7, 16, 33, 4, 230, DateTimeKind.Local).AddTicks(8947),
                            InsuranceBusinessName = "Jacobs LLC",
                            PolicyNumber = 54164840
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2019, 12, 12, 12, 32, 20, 627, DateTimeKind.Local).AddTicks(8135),
                            InsuranceBusinessName = "Beer - Oberbrunner",
                            PolicyNumber = 26530871
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 4, 11, 9, 19, 2, 920, DateTimeKind.Local).AddTicks(5015),
                            InsuranceBusinessName = "Powlowski Group",
                            PolicyNumber = 48185578
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 10, 14, 12, 9, 26, 31, DateTimeKind.Local).AddTicks(333),
                            InsuranceBusinessName = "Pfeffer and Sons",
                            PolicyNumber = 33107462
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 6, 20, 0, 41, 3, 333, DateTimeKind.Local).AddTicks(7133),
                            InsuranceBusinessName = "Fritsch - Mills",
                            PolicyNumber = 3248799
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.WarehouseLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aisle");

                    b.Property<string>("Level");

                    b.Property<string>("Position");

                    b.Property<string>("Section");

                    b.HasKey("Id");

                    b.ToTable("WarehouseLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.HasOne("Web.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany("Merchandise")
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.HasOne("Web.Models.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithOne("OperationState")
                        .HasForeignKey("Web.Models.Domain.OperationState", "RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.HasOne("Web.Models.Domain.Merchandise", "Merchandise")
                        .WithMany("Pallets")
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.WarehouseLocation", "WarehouseLocation")
                        .WithMany()
                        .HasForeignKey("WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.HasOne("Web.Models.Domain.TrailerInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("TrailerInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.HasOne("Web.Models.Domain.VehicleInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("VehicleInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
