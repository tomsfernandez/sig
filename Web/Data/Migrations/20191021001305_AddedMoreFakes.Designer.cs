// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191021001305_AddedMoreFakes")]
    partial class AddedMoreFakes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Models.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Street");

                    b.Property<string>("StreetHeight");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Lake Adolphusmouth",
                            Country = "Monaco",
                            Street = "Cedrick Isle",
                            StreetHeight = "87820"
                        },
                        new
                        {
                            Id = 2L,
                            City = "New Toy",
                            Country = "Chad",
                            Street = "Deborah Expressway",
                            StreetHeight = "881"
                        },
                        new
                        {
                            Id = 3L,
                            City = "Port Talon",
                            Country = "Seychelles",
                            Street = "Curt Junctions",
                            StreetHeight = "894"
                        },
                        new
                        {
                            Id = 4L,
                            City = "West Armand",
                            Country = "South Africa",
                            Street = "Winifred Mount",
                            StreetHeight = "185"
                        },
                        new
                        {
                            Id = 5L,
                            City = "Port Frederichaven",
                            Country = "Congo",
                            Street = "Sauer Meadow",
                            StreetHeight = "29959"
                        },
                        new
                        {
                            Id = 6L,
                            City = "New Lauretta",
                            Country = "Swaziland",
                            Street = "Tianna Lake",
                            StreetHeight = "16251"
                        },
                        new
                        {
                            Id = 7L,
                            City = "East Salvatorefurt",
                            Country = "Singapore",
                            Street = "Kiel Passage",
                            StreetHeight = "013"
                        },
                        new
                        {
                            Id = 8L,
                            City = "West Lillyberg",
                            Country = "United States Minor Outlying Islands",
                            Street = "Lesch Spur",
                            StreetHeight = "15838"
                        },
                        new
                        {
                            Id = 9L,
                            City = "New Tayaville",
                            Country = "French Polynesia",
                            Street = "Eldora Knolls",
                            StreetHeight = "213"
                        },
                        new
                        {
                            Id = 10L,
                            City = "Aaronborough",
                            Country = "Sudan",
                            Street = "Horacio Neck",
                            StreetHeight = "57049"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AddressId");

                    b.Property<string>("BusinessName");

                    b.Property<string>("Cuit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 1L,
                            BusinessName = "Schmitt, Abbott and Orn",
                            Cuit = "62482387"
                        },
                        new
                        {
                            Id = 2L,
                            AddressId = 2L,
                            BusinessName = "Schuster Group",
                            Cuit = "03215852"
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 3L,
                            BusinessName = "Satterfield, Steuber and Walker",
                            Cuit = "03131121"
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 4L,
                            BusinessName = "Hilll and Sons",
                            Cuit = "44258849"
                        },
                        new
                        {
                            Id = 5L,
                            AddressId = 5L,
                            BusinessName = "Morar - King",
                            Cuit = "26521596"
                        },
                        new
                        {
                            Id = 6L,
                            AddressId = 6L,
                            BusinessName = "Bins, Haley and Senger",
                            Cuit = "01759341"
                        },
                        new
                        {
                            Id = 7L,
                            AddressId = 7L,
                            BusinessName = "Fay LLC",
                            Cuit = "04459958"
                        },
                        new
                        {
                            Id = 8L,
                            AddressId = 8L,
                            BusinessName = "Watsica, Beahan and Kshlerin",
                            Cuit = "14647918"
                        },
                        new
                        {
                            Id = 9L,
                            AddressId = 9L,
                            BusinessName = "Farrell - Fisher",
                            Cuit = "90642593"
                        },
                        new
                        {
                            Id = 10L,
                            AddressId = 10L,
                            BusinessName = "Lemke, Yost and Gleichner",
                            Cuit = "37210618"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Dock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Occupied");

                    b.HasKey("Id");

                    b.ToTable("Dock");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 2L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 3L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 4L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 5L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 6L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 7L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 8L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 9L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 10L,
                            Occupied = false
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dni");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Dni = "153.108.75.35",
                            LastName = "Heathcote",
                            Name = "Dino"
                        },
                        new
                        {
                            Id = 2L,
                            Dni = "219.188.16.31",
                            LastName = "King",
                            Name = "Damaris"
                        },
                        new
                        {
                            Id = 3L,
                            Dni = "78.129.0.104",
                            LastName = "Jacobs",
                            Name = "Ansley"
                        },
                        new
                        {
                            Id = 4L,
                            Dni = "221.22.186.114",
                            LastName = "Sipes",
                            Name = "Joanny"
                        },
                        new
                        {
                            Id = 5L,
                            Dni = "103.15.54.200",
                            LastName = "King",
                            Name = "Leola"
                        },
                        new
                        {
                            Id = 6L,
                            Dni = "81.166.69.13",
                            LastName = "Schmidt",
                            Name = "Adolf"
                        },
                        new
                        {
                            Id = 7L,
                            Dni = "242.204.201.74",
                            LastName = "Leffler",
                            Name = "Leola"
                        },
                        new
                        {
                            Id = 8L,
                            Dni = "115.224.162.21",
                            LastName = "Rowe",
                            Name = "Marilie"
                        },
                        new
                        {
                            Id = 9L,
                            Dni = "97.99.42.193",
                            LastName = "Lynch",
                            Name = "Danielle"
                        },
                        new
                        {
                            Id = 10L,
                            Dni = "106.38.235.117",
                            LastName = "Doyle",
                            Name = "Myriam"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverPermit");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DriverId = 1L,
                            ExpirationDate = new DateTime(2020, 6, 4, 21, 7, 7, 945, DateTimeKind.Local).AddTicks(7413),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DriverId = 2L,
                            ExpirationDate = new DateTime(2020, 3, 2, 6, 17, 40, 957, DateTimeKind.Local).AddTicks(4432),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            DriverId = 3L,
                            ExpirationDate = new DateTime(2020, 5, 29, 0, 41, 29, 335, DateTimeKind.Local).AddTicks(8504),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            DriverId = 4L,
                            ExpirationDate = new DateTime(2020, 8, 20, 15, 43, 57, 388, DateTimeKind.Local).AddTicks(8658),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            DriverId = 5L,
                            ExpirationDate = new DateTime(2020, 8, 15, 18, 0, 49, 369, DateTimeKind.Local).AddTicks(6351),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            DriverId = 6L,
                            ExpirationDate = new DateTime(2020, 1, 29, 10, 28, 21, 564, DateTimeKind.Local).AddTicks(9537),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            DriverId = 7L,
                            ExpirationDate = new DateTime(2020, 7, 3, 7, 31, 58, 78, DateTimeKind.Local).AddTicks(6014),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            DriverId = 8L,
                            ExpirationDate = new DateTime(2020, 7, 9, 22, 1, 29, 517, DateTimeKind.Local).AddTicks(703),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            DriverId = 9L,
                            ExpirationDate = new DateTime(2020, 7, 20, 7, 18, 30, 730, DateTimeKind.Local).AddTicks(2160),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            DriverId = 10L,
                            ExpirationDate = new DateTime(2020, 3, 7, 17, 53, 26, 402, DateTimeKind.Local).AddTicks(5398),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime?>("EntryDate");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<long>("RemittanceId");

                    b.Property<long>("TrailerId");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BoxHeight");

                    b.Property<double>("BoxLength");

                    b.Property<double>("BoxWeight");

                    b.Property<double>("BoxWidth");

                    b.Property<string>("Description");

                    b.Property<string>("ExternCode");

                    b.Property<long>("RemittanceId");

                    b.Property<int>("TotalBoxes");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("Merchandise");
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverageType");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<string>("InsuredMerchandise");

                    b.Property<int>("PolicyNumber");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("SafetyMeasures");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("MerchandiseInsurance");
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DockId");

                    b.Property<DateTime>("DownloadFinishedAt");

                    b.Property<DateTime>("DownloadStartedAt");

                    b.Property<long>("EntryId");

                    b.Property<string>("MerchandiseState");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("RemittanceState");

                    b.HasKey("Id");

                    b.HasIndex("DockId");

                    b.HasIndex("EntryId");

                    b.HasIndex("RemittanceId")
                        .IsUnique();

                    b.ToTable("OperationState");
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfBoxes");

                    b.Property<DateTime>("EntryTimestamp");

                    b.Property<DateTime>("ExitTimestamp");

                    b.Property<double>("Height");

                    b.Property<long>("MerchandiseId");

                    b.Property<string>("State");

                    b.Property<long>("WarehouseLocationId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("Pallet");
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertifiedBy");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("RTO");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 9, 13, 11, 28, 15, 714, DateTimeKind.Local).AddTicks(4659),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 8, 6, 13, 0, 54, 967, DateTimeKind.Local).AddTicks(9230),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 9, 24, 14, 18, 18, 920, DateTimeKind.Local).AddTicks(82),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 5, 30, 3, 10, 40, 169, DateTimeKind.Local).AddTicks(1364),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 19, 2, 46, 46, 383, DateTimeKind.Local).AddTicks(5923),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 10, 14, 22, 19, 256, DateTimeKind.Local).AddTicks(4673),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 3, 3, 13, 43, 19, 485, DateTimeKind.Local).AddTicks(6941),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 9, 3, 7, 27, 7, 853, DateTimeKind.Local).AddTicks(4572),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 20, 6, 45, 47, 871, DateTimeKind.Local).AddTicks(124),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 8, 5, 11, 33, 18, 79, DateTimeKind.Local).AddTicks(8896),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RUTA");
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DeliveryType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Remittance");
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LicensePlate");

                    b.Property<long>("TrailerInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("TrailerInsuranceId");

                    b.ToTable("Trailer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LicensePlate = "31007",
                            TrailerInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LicensePlate = "55378",
                            TrailerInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            LicensePlate = "13624-8577",
                            TrailerInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            LicensePlate = "40806",
                            TrailerInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            LicensePlate = "01645-1506",
                            TrailerInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            LicensePlate = "59629-4992",
                            TrailerInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            LicensePlate = "08936-4387",
                            TrailerInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            LicensePlate = "17795",
                            TrailerInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            LicensePlate = "03008",
                            TrailerInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            LicensePlate = "54351-5400",
                            TrailerInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.TrailerInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("TrailerInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 9, 22, 23, 1, 9, 49, DateTimeKind.Local).AddTicks(762),
                            InsuranceBusinessName = "Romaguera, Maggio and Glover",
                            PolicyNumber = 69838194
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 7, 3, 2, 53, 55, 374, DateTimeKind.Local).AddTicks(4244),
                            InsuranceBusinessName = "Hills - Heathcote",
                            PolicyNumber = 3672914
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 3, 17, 4, 2, 41, 457, DateTimeKind.Local).AddTicks(770),
                            InsuranceBusinessName = "Treutel - Zulauf",
                            PolicyNumber = 35507802
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2020, 8, 24, 6, 10, 56, 804, DateTimeKind.Local).AddTicks(9412),
                            InsuranceBusinessName = "Dietrich Inc",
                            PolicyNumber = 85956674
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 1, 19, 21, 36, 17, 688, DateTimeKind.Local).AddTicks(4948),
                            InsuranceBusinessName = "Watsica, Boehm and Goldner",
                            PolicyNumber = 30039803
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 4, 2, 11, 21, 9, 896, DateTimeKind.Local).AddTicks(1135),
                            InsuranceBusinessName = "Hilpert, Walker and Pfeffer",
                            PolicyNumber = 58311868
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 1, 5, 2, 5, 59, 746, DateTimeKind.Local).AddTicks(7211),
                            InsuranceBusinessName = "Mayer and Sons",
                            PolicyNumber = 17635820
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 2, 7, 4, 26, 24, 375, DateTimeKind.Local).AddTicks(6366),
                            InsuranceBusinessName = "Hand LLC",
                            PolicyNumber = 49482515
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 2, 24, 17, 26, 13, 497, DateTimeKind.Local).AddTicks(1866),
                            InsuranceBusinessName = "Kovacek and Sons",
                            PolicyNumber = 46345257
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 6, 12, 22, 10, 25, 901, DateTimeKind.Local).AddTicks(26),
                            InsuranceBusinessName = "Casper, Osinski and Beier",
                            PolicyNumber = 61226104
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("Model");

                    b.Property<string>("Type");

                    b.Property<long>("VehicleInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInsuranceId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Brand = "Maserati",
                            LicensePlate = "43183",
                            Model = "Malibu",
                            Type = "SUV",
                            VehicleInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Brand = "Maserati",
                            LicensePlate = "00306",
                            Model = "A8",
                            Type = "Coupe",
                            VehicleInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Brand = "Audi",
                            LicensePlate = "32599",
                            Model = "Aventador",
                            Type = "SUV",
                            VehicleInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Brand = "Hyandai",
                            LicensePlate = "64042",
                            Model = "Mercielago",
                            Type = "Hatchback",
                            VehicleInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Brand = "Rolls Royce",
                            LicensePlate = "25973-9161",
                            Model = "Malibu",
                            Type = "Cargo Van",
                            VehicleInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Brand = "Fiat",
                            LicensePlate = "08785",
                            Model = "A4",
                            Type = "Hatchback",
                            VehicleInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Brand = "BMW",
                            LicensePlate = "88318",
                            Model = "Charger",
                            Type = "Extended Cab Pickup",
                            VehicleInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Brand = "Hyandai",
                            LicensePlate = "75572-1586",
                            Model = "Grand Caravan",
                            Type = "SUV",
                            VehicleInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Brand = "Lamborghini",
                            LicensePlate = "69332",
                            Model = "Impala",
                            Type = "Sedan",
                            VehicleInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            Brand = "Fiat",
                            LicensePlate = "64061-4112",
                            Model = "CTS",
                            Type = "Convertible",
                            VehicleInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.VehicleInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("VehicleInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 4, 7, 8, 34, 43, 342, DateTimeKind.Local).AddTicks(351),
                            InsuranceBusinessName = "Kunze Inc",
                            PolicyNumber = 10168516
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 4, 3, 20, 41, 29, 716, DateTimeKind.Local).AddTicks(1308),
                            InsuranceBusinessName = "Hammes and Sons",
                            PolicyNumber = 26542966
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 5, 21, 10, 27, 18, 161, DateTimeKind.Local).AddTicks(5341),
                            InsuranceBusinessName = "Thompson, Kuhic and Berge",
                            PolicyNumber = 42254768
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2020, 9, 23, 20, 13, 49, 363, DateTimeKind.Local).AddTicks(1261),
                            InsuranceBusinessName = "Gleason - Daugherty",
                            PolicyNumber = 15380098
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 6, 24, 0, 34, 24, 739, DateTimeKind.Local).AddTicks(1377),
                            InsuranceBusinessName = "Johnson Group",
                            PolicyNumber = 81602124
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 1, 4, 20, 15, 37, 346, DateTimeKind.Local).AddTicks(6009),
                            InsuranceBusinessName = "Hand - Wolff",
                            PolicyNumber = 69321467
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 1, 10, 21, 37, 47, 799, DateTimeKind.Local).AddTicks(2981),
                            InsuranceBusinessName = "Will - Dibbert",
                            PolicyNumber = 4981510
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 7, 25, 18, 12, 7, 625, DateTimeKind.Local).AddTicks(6037),
                            InsuranceBusinessName = "Fahey - Nolan",
                            PolicyNumber = 23476479
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 6, 28, 8, 40, 39, 712, DateTimeKind.Local).AddTicks(152),
                            InsuranceBusinessName = "Nader, Steuber and White",
                            PolicyNumber = 48448949
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 4, 3, 1, 2, 42, 922, DateTimeKind.Local).AddTicks(8143),
                            InsuranceBusinessName = "Stracke and Sons",
                            PolicyNumber = 12149711
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.WarehouseLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aisle");

                    b.Property<string>("Level");

                    b.Property<string>("Position");

                    b.Property<string>("Section");

                    b.HasKey("Id");

                    b.ToTable("WarehouseLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.HasOne("Web.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany("Merchandise")
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.HasOne("Web.Models.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithOne("OperationState")
                        .HasForeignKey("Web.Models.Domain.OperationState", "RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.HasOne("Web.Models.Domain.Merchandise", "Merchandise")
                        .WithMany()
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.WarehouseLocation", "WarehouseLocation")
                        .WithMany()
                        .HasForeignKey("WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.HasOne("Web.Models.Domain.TrailerInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("TrailerInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.HasOne("Web.Models.Domain.VehicleInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("VehicleInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
