// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191021223452_NoseQueEstoyMigrando")]
    partial class NoseQueEstoyMigrando
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Models.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Street");

                    b.Property<string>("StreetHeight");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "North Nadiaview",
                            Country = "Republic of Korea",
                            Street = "Hills Streets",
                            StreetHeight = "9737"
                        },
                        new
                        {
                            Id = 2L,
                            City = "Lake Eulahbury",
                            Country = "Poland",
                            Street = "McDermott Turnpike",
                            StreetHeight = "923"
                        },
                        new
                        {
                            Id = 3L,
                            City = "Hicklemouth",
                            Country = "Djibouti",
                            Street = "Esperanza Lights",
                            StreetHeight = "8238"
                        },
                        new
                        {
                            Id = 4L,
                            City = "Weimannton",
                            Country = "Austria",
                            Street = "Littel Islands",
                            StreetHeight = "7943"
                        },
                        new
                        {
                            Id = 5L,
                            City = "East Lucystad",
                            Country = "Albania",
                            Street = "Lyric Fall",
                            StreetHeight = "377"
                        },
                        new
                        {
                            Id = 6L,
                            City = "North Mafalda",
                            Country = "Lesotho",
                            Street = "Tara Summit",
                            StreetHeight = "79159"
                        },
                        new
                        {
                            Id = 7L,
                            City = "West Katarina",
                            Country = "Seychelles",
                            Street = "Mayert Shores",
                            StreetHeight = "9521"
                        },
                        new
                        {
                            Id = 8L,
                            City = "Nolanstad",
                            Country = "Greece",
                            Street = "Adeline Terrace",
                            StreetHeight = "20247"
                        },
                        new
                        {
                            Id = 9L,
                            City = "Breitenbergberg",
                            Country = "Greece",
                            Street = "Cole Canyon",
                            StreetHeight = "719"
                        },
                        new
                        {
                            Id = 10L,
                            City = "Destinfort",
                            Country = "Benin",
                            Street = "Hansen Brook",
                            StreetHeight = "855"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AddressId");

                    b.Property<string>("BusinessName");

                    b.Property<string>("Cuit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 1L,
                            BusinessName = "Monahan LLC",
                            Cuit = "92374089"
                        },
                        new
                        {
                            Id = 2L,
                            AddressId = 2L,
                            BusinessName = "Funk, Quigley and O'Hara",
                            Cuit = "13324063"
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 3L,
                            BusinessName = "Goldner, Kub and Rolfson",
                            Cuit = "02805610"
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 4L,
                            BusinessName = "Sanford, Turcotte and O'Keefe",
                            Cuit = "02830780"
                        },
                        new
                        {
                            Id = 5L,
                            AddressId = 5L,
                            BusinessName = "Schulist - Abshire",
                            Cuit = "03163610"
                        },
                        new
                        {
                            Id = 6L,
                            AddressId = 6L,
                            BusinessName = "Jenkins - Kub",
                            Cuit = "31111836"
                        },
                        new
                        {
                            Id = 7L,
                            AddressId = 7L,
                            BusinessName = "Dickinson - Pagac",
                            Cuit = "49742145"
                        },
                        new
                        {
                            Id = 8L,
                            AddressId = 8L,
                            BusinessName = "Blick Group",
                            Cuit = "87679960"
                        },
                        new
                        {
                            Id = 9L,
                            AddressId = 9L,
                            BusinessName = "Cormier - Beahan",
                            Cuit = "04343905"
                        },
                        new
                        {
                            Id = 10L,
                            AddressId = 10L,
                            BusinessName = "Effertz - Dibbert",
                            Cuit = "34215159"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Dock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Occupied");

                    b.HasKey("Id");

                    b.ToTable("Dock");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 2L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 3L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 4L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 5L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 6L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 7L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 8L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 9L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 10L,
                            Occupied = false
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dni");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Dni = "182.115.58.51",
                            LastName = "Hegmann",
                            Name = "Ara"
                        },
                        new
                        {
                            Id = 2L,
                            Dni = "117.168.140.109",
                            LastName = "Fadel",
                            Name = "Harley"
                        },
                        new
                        {
                            Id = 3L,
                            Dni = "62.30.250.87",
                            LastName = "Oberbrunner",
                            Name = "Burley"
                        },
                        new
                        {
                            Id = 4L,
                            Dni = "4.144.84.41",
                            LastName = "Boyer",
                            Name = "Donavon"
                        },
                        new
                        {
                            Id = 5L,
                            Dni = "203.216.227.146",
                            LastName = "Kunde",
                            Name = "Hassie"
                        },
                        new
                        {
                            Id = 6L,
                            Dni = "137.41.205.88",
                            LastName = "Veum",
                            Name = "Woodrow"
                        },
                        new
                        {
                            Id = 7L,
                            Dni = "235.216.245.16",
                            LastName = "Rowe",
                            Name = "Talia"
                        },
                        new
                        {
                            Id = 8L,
                            Dni = "196.139.166.99",
                            LastName = "Bernier",
                            Name = "Walter"
                        },
                        new
                        {
                            Id = 9L,
                            Dni = "104.17.37.125",
                            LastName = "Metz",
                            Name = "Kian"
                        },
                        new
                        {
                            Id = 10L,
                            Dni = "58.141.46.33",
                            LastName = "Fay",
                            Name = "Hailee"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverPermit");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DriverId = 1L,
                            ExpirationDate = new DateTime(2019, 12, 2, 10, 25, 28, 503, DateTimeKind.Local).AddTicks(6866),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DriverId = 2L,
                            ExpirationDate = new DateTime(2020, 4, 11, 6, 57, 43, 260, DateTimeKind.Local).AddTicks(6146),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            DriverId = 3L,
                            ExpirationDate = new DateTime(2020, 4, 2, 23, 33, 47, 193, DateTimeKind.Local).AddTicks(9449),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            DriverId = 4L,
                            ExpirationDate = new DateTime(2020, 8, 16, 15, 10, 53, 296, DateTimeKind.Local).AddTicks(3633),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            DriverId = 5L,
                            ExpirationDate = new DateTime(2020, 3, 15, 13, 5, 41, 367, DateTimeKind.Local).AddTicks(9262),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            DriverId = 6L,
                            ExpirationDate = new DateTime(2020, 8, 19, 8, 26, 38, 694, DateTimeKind.Local).AddTicks(4211),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            DriverId = 7L,
                            ExpirationDate = new DateTime(2020, 2, 10, 16, 15, 19, 207, DateTimeKind.Local).AddTicks(1676),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            DriverId = 8L,
                            ExpirationDate = new DateTime(2020, 8, 31, 23, 1, 54, 500, DateTimeKind.Local).AddTicks(1263),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            DriverId = 9L,
                            ExpirationDate = new DateTime(2020, 7, 20, 22, 12, 29, 520, DateTimeKind.Local).AddTicks(9169),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            DriverId = 10L,
                            ExpirationDate = new DateTime(2020, 2, 18, 21, 33, 59, 717, DateTimeKind.Local).AddTicks(312),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime?>("EntryDate");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<long>("RemittanceId");

                    b.Property<long>("TrailerId");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BoxHeight");

                    b.Property<double>("BoxLength");

                    b.Property<double>("BoxWeight");

                    b.Property<double>("BoxWidth");

                    b.Property<string>("Description");

                    b.Property<string>("ExternCode");

                    b.Property<long>("RemittanceId");

                    b.Property<int>("TotalBoxes");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("Merchandise");
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverageType");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<string>("InsuredMerchandise");

                    b.Property<int>("PolicyNumber");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("SafetyMeasures");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("MerchandiseInsurance");
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DockId");

                    b.Property<DateTime>("DownloadFinishedAt");

                    b.Property<DateTime>("DownloadStartedAt");

                    b.Property<long>("EntryId");

                    b.Property<string>("MerchandiseState");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("RemittanceState");

                    b.HasKey("Id");

                    b.HasIndex("DockId");

                    b.HasIndex("EntryId");

                    b.HasIndex("RemittanceId")
                        .IsUnique();

                    b.ToTable("OperationState");
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfBoxes");

                    b.Property<DateTime>("EntryTimestamp");

                    b.Property<DateTime>("ExitTimestamp");

                    b.Property<double>("Height");

                    b.Property<long>("MerchandiseId");

                    b.Property<string>("State");

                    b.Property<long>("WarehouseLocationId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("Pallet");
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertifiedBy");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("RTO");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 8, 24, 16, 28, 28, 790, DateTimeKind.Local).AddTicks(9563),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 3, 7, 21, 59, 36, 865, DateTimeKind.Local).AddTicks(2583),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 9, 5, 10, 45, 54, 91, DateTimeKind.Local).AddTicks(3063),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 7, 27, 7, 16, 50, 694, DateTimeKind.Local).AddTicks(2021),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 10, 5, 16, 6, 26, 771, DateTimeKind.Local).AddTicks(5545),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 8, 17, 4, 38, 1, 171, DateTimeKind.Local).AddTicks(6046),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 5, 31, 10, 35, 45, 683, DateTimeKind.Local).AddTicks(759),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 10, 29, 19, 17, 4, 952, DateTimeKind.Local).AddTicks(3804),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 5, 14, 23, 40, 4, 917, DateTimeKind.Local).AddTicks(118),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 9, 4, 2, 34, 46, 202, DateTimeKind.Local).AddTicks(6766),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RUTA");
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DeliveryType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Remittance");
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LicensePlate");

                    b.Property<long>("TrailerInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("TrailerInsuranceId");

                    b.ToTable("Trailer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LicensePlate = "05711",
                            TrailerInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LicensePlate = "49386",
                            TrailerInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            LicensePlate = "71484-8184",
                            TrailerInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            LicensePlate = "82339-6246",
                            TrailerInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            LicensePlate = "67519-5201",
                            TrailerInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            LicensePlate = "65059-0836",
                            TrailerInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            LicensePlate = "70946",
                            TrailerInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            LicensePlate = "78287",
                            TrailerInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            LicensePlate = "29106-3996",
                            TrailerInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            LicensePlate = "69932",
                            TrailerInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.TrailerInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("TrailerInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 3, 27, 5, 19, 0, 86, DateTimeKind.Local).AddTicks(3810),
                            InsuranceBusinessName = "Hills - Hand",
                            PolicyNumber = 69340543
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 10, 3, 23, 42, 3, 187, DateTimeKind.Local).AddTicks(3725),
                            InsuranceBusinessName = "Lakin, Jenkins and Paucek",
                            PolicyNumber = 62364683
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 1, 7, 12, 35, 29, 415, DateTimeKind.Local).AddTicks(6576),
                            InsuranceBusinessName = "Keebler - Schaden",
                            PolicyNumber = 88848822
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2019, 12, 25, 2, 58, 24, 612, DateTimeKind.Local).AddTicks(8103),
                            InsuranceBusinessName = "Volkman Group",
                            PolicyNumber = 8989451
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2019, 10, 25, 3, 7, 21, 58, DateTimeKind.Local).AddTicks(9706),
                            InsuranceBusinessName = "Quigley - Denesik",
                            PolicyNumber = 71390109
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 9, 14, 6, 29, 8, 458, DateTimeKind.Local).AddTicks(8240),
                            InsuranceBusinessName = "Turcotte Inc",
                            PolicyNumber = 94610574
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 6, 26, 10, 43, 26, 617, DateTimeKind.Local).AddTicks(5807),
                            InsuranceBusinessName = "Crona, Runte and Williamson",
                            PolicyNumber = 2858814
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 8, 13, 11, 47, 28, 78, DateTimeKind.Local).AddTicks(4896),
                            InsuranceBusinessName = "Blick, Balistreri and Bashirian",
                            PolicyNumber = 7197031
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2019, 11, 16, 23, 3, 8, 649, DateTimeKind.Local).AddTicks(2635),
                            InsuranceBusinessName = "Daniel Group",
                            PolicyNumber = 52749476
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 8, 2, 17, 40, 44, 57, DateTimeKind.Local).AddTicks(1962),
                            InsuranceBusinessName = "Fisher Inc",
                            PolicyNumber = 531375
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("Model");

                    b.Property<string>("Type");

                    b.Property<long>("VehicleInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInsuranceId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Brand = "Aston Martin",
                            LicensePlate = "00508-0209",
                            Model = "Escalade",
                            Type = "Sedan",
                            VehicleInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Brand = "Aston Martin",
                            LicensePlate = "60851-6092",
                            Model = "Model T",
                            Type = "SUV",
                            VehicleInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Brand = "Lamborghini",
                            LicensePlate = "97776",
                            Model = "Cruze",
                            Type = "Minivan",
                            VehicleInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Brand = "Nissan",
                            LicensePlate = "75000",
                            Model = "Grand Caravan",
                            Type = "Extended Cab Pickup",
                            VehicleInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Brand = "Maserati",
                            LicensePlate = "05832-1247",
                            Model = "Mercielago",
                            Type = "Minivan",
                            VehicleInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Brand = "Lamborghini",
                            LicensePlate = "34504",
                            Model = "Prius",
                            Type = "SUV",
                            VehicleInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Brand = "Toyota",
                            LicensePlate = "25133-4062",
                            Model = "Impala",
                            Type = "Wagon",
                            VehicleInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Brand = "Kia",
                            LicensePlate = "05656",
                            Model = "Camry",
                            Type = "Cargo Van",
                            VehicleInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Brand = "Volkswagen",
                            LicensePlate = "66425-5046",
                            Model = "Volt",
                            Type = "Minivan",
                            VehicleInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            Brand = "Honda",
                            LicensePlate = "21988",
                            Model = "Civic",
                            Type = "Coupe",
                            VehicleInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.VehicleInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("VehicleInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 2, 8, 1, 54, 38, 788, DateTimeKind.Local).AddTicks(7809),
                            InsuranceBusinessName = "Cole, Bergstrom and Johnston",
                            PolicyNumber = 48208246
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2019, 12, 21, 19, 24, 53, 685, DateTimeKind.Local).AddTicks(4968),
                            InsuranceBusinessName = "Swift - Schuppe",
                            PolicyNumber = 69653742
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 5, 31, 6, 35, 45, 971, DateTimeKind.Local).AddTicks(7923),
                            InsuranceBusinessName = "Schamberger, Kessler and Rempel",
                            PolicyNumber = 33052144
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2020, 8, 9, 6, 17, 59, 989, DateTimeKind.Local).AddTicks(2669),
                            InsuranceBusinessName = "Hauck, O'Connell and Stanton",
                            PolicyNumber = 5763900
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 9, 13, 6, 55, 24, 319, DateTimeKind.Local).AddTicks(9532),
                            InsuranceBusinessName = "Nienow - Raynor",
                            PolicyNumber = 69614606
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 2, 23, 8, 11, 52, 786, DateTimeKind.Local).AddTicks(582),
                            InsuranceBusinessName = "Stokes - Willms",
                            PolicyNumber = 78627635
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 1, 20, 22, 2, 54, 385, DateTimeKind.Local).AddTicks(2165),
                            InsuranceBusinessName = "Simonis, Prohaska and Kunze",
                            PolicyNumber = 60600479
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 6, 5, 11, 56, 27, 332, DateTimeKind.Local).AddTicks(1747),
                            InsuranceBusinessName = "Witting - Hackett",
                            PolicyNumber = 92422148
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 2, 2, 14, 31, 47, 458, DateTimeKind.Local).AddTicks(417),
                            InsuranceBusinessName = "Yundt Group",
                            PolicyNumber = 8772299
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 5, 26, 23, 20, 25, 753, DateTimeKind.Local).AddTicks(6351),
                            InsuranceBusinessName = "Towne, Dickinson and Emard",
                            PolicyNumber = 36436552
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.WarehouseLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aisle");

                    b.Property<string>("Level");

                    b.Property<string>("Position");

                    b.Property<string>("Section");

                    b.HasKey("Id");

                    b.ToTable("WarehouseLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.HasOne("Web.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany("Merchandise")
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.HasOne("Web.Models.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithOne("OperationState")
                        .HasForeignKey("Web.Models.Domain.OperationState", "RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.HasOne("Web.Models.Domain.Merchandise", "Merchandise")
                        .WithMany()
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.WarehouseLocation", "WarehouseLocation")
                        .WithMany()
                        .HasForeignKey("WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.HasOne("Web.Models.Domain.TrailerInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("TrailerInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.HasOne("Web.Models.Domain.VehicleInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("VehicleInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
