// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191023002552_AddDownloadedPallets")]
    partial class AddDownloadedPallets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Web.Models.Domain.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("City");

                    b.Property<string>("Country");

                    b.Property<string>("Street");

                    b.Property<string>("StreetHeight");

                    b.HasKey("Id");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            City = "Frederictown",
                            Country = "Chile",
                            Street = "Ewald Estates",
                            StreetHeight = "080"
                        },
                        new
                        {
                            Id = 2L,
                            City = "Elnoraborough",
                            Country = "Tanzania",
                            Street = "Schmidt Common",
                            StreetHeight = "3355"
                        },
                        new
                        {
                            Id = 3L,
                            City = "Glennatown",
                            Country = "Nepal",
                            Street = "Howell Mount",
                            StreetHeight = "24159"
                        },
                        new
                        {
                            Id = 4L,
                            City = "South Christelletown",
                            Country = "Fiji",
                            Street = "Cormier Fork",
                            StreetHeight = "3134"
                        },
                        new
                        {
                            Id = 5L,
                            City = "Audraburgh",
                            Country = "Luxembourg",
                            Street = "Schimmel Forge",
                            StreetHeight = "43835"
                        },
                        new
                        {
                            Id = 6L,
                            City = "Nicholasfort",
                            Country = "Guyana",
                            Street = "Koch Springs",
                            StreetHeight = "9553"
                        },
                        new
                        {
                            Id = 7L,
                            City = "Feltonberg",
                            Country = "Virgin Islands, U.S.",
                            Street = "Emmanuelle Fields",
                            StreetHeight = "218"
                        },
                        new
                        {
                            Id = 8L,
                            City = "Weimannborough",
                            Country = "Bahamas",
                            Street = "Tatum Crest",
                            StreetHeight = "785"
                        },
                        new
                        {
                            Id = 9L,
                            City = "Jofurt",
                            Country = "Bahrain",
                            Street = "Raynor Oval",
                            StreetHeight = "31591"
                        },
                        new
                        {
                            Id = 10L,
                            City = "Schroederton",
                            Country = "Bolivia",
                            Street = "Leila Plaza",
                            StreetHeight = "47787"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AddressId");

                    b.Property<string>("BusinessName");

                    b.Property<string>("Cuit");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AddressId = 1L,
                            BusinessName = "Kihn - Smitham",
                            Cuit = "68486778"
                        },
                        new
                        {
                            Id = 2L,
                            AddressId = 2L,
                            BusinessName = "Rau, Kuvalis and Corkery",
                            Cuit = "07740725"
                        },
                        new
                        {
                            Id = 3L,
                            AddressId = 3L,
                            BusinessName = "Brakus - Bartoletti",
                            Cuit = "81216871"
                        },
                        new
                        {
                            Id = 4L,
                            AddressId = 4L,
                            BusinessName = "Smitham, Moore and Bernhard",
                            Cuit = "64474243"
                        },
                        new
                        {
                            Id = 5L,
                            AddressId = 5L,
                            BusinessName = "Berge and Sons",
                            Cuit = "31426039"
                        },
                        new
                        {
                            Id = 6L,
                            AddressId = 6L,
                            BusinessName = "Yundt, Schuster and Bosco",
                            Cuit = "38872600"
                        },
                        new
                        {
                            Id = 7L,
                            AddressId = 7L,
                            BusinessName = "Aufderhar, Spencer and Thiel",
                            Cuit = "80432760"
                        },
                        new
                        {
                            Id = 8L,
                            AddressId = 8L,
                            BusinessName = "Terry - Funk",
                            Cuit = "06407902"
                        },
                        new
                        {
                            Id = 9L,
                            AddressId = 9L,
                            BusinessName = "Hudson, Boehm and Stanton",
                            Cuit = "79365017"
                        },
                        new
                        {
                            Id = 10L,
                            AddressId = 10L,
                            BusinessName = "Jacobi - Gleason",
                            Cuit = "05424726"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Dock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Occupied");

                    b.HasKey("Id");

                    b.ToTable("Dock");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 2L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 3L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 4L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 5L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 6L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 7L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 8L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 9L,
                            Occupied = false
                        },
                        new
                        {
                            Id = 10L,
                            Occupied = false
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Driver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Dni");

                    b.Property<string>("LastName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Driver");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Dni = "193.158.41.127",
                            LastName = "Spencer",
                            Name = "Tyree"
                        },
                        new
                        {
                            Id = 2L,
                            Dni = "77.46.97.178",
                            LastName = "Pouros",
                            Name = "Jewell"
                        },
                        new
                        {
                            Id = 3L,
                            Dni = "250.0.161.193",
                            LastName = "Bradtke",
                            Name = "Alene"
                        },
                        new
                        {
                            Id = 4L,
                            Dni = "27.28.167.169",
                            LastName = "Johnston",
                            Name = "Michele"
                        },
                        new
                        {
                            Id = 5L,
                            Dni = "224.122.252.255",
                            LastName = "Aufderhar",
                            Name = "Andreane"
                        },
                        new
                        {
                            Id = 6L,
                            Dni = "205.90.53.187",
                            LastName = "Rutherford",
                            Name = "Bettie"
                        },
                        new
                        {
                            Id = 7L,
                            Dni = "235.90.216.35",
                            LastName = "Kuhlman",
                            Name = "Alan"
                        },
                        new
                        {
                            Id = 8L,
                            Dni = "55.78.176.235",
                            LastName = "Gibson",
                            Name = "Heidi"
                        },
                        new
                        {
                            Id = 9L,
                            Dni = "106.207.110.28",
                            LastName = "O'Reilly",
                            Name = "Eliezer"
                        },
                        new
                        {
                            Id = 10L,
                            Dni = "165.24.230.190",
                            LastName = "Kohler",
                            Name = "Liliane"
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("VehicleId");

                    b.ToTable("DriverPermit");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DriverId = 1L,
                            ExpirationDate = new DateTime(2020, 1, 17, 19, 54, 43, 460, DateTimeKind.Local).AddTicks(5246),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            DriverId = 2L,
                            ExpirationDate = new DateTime(2020, 4, 11, 0, 27, 12, 589, DateTimeKind.Local).AddTicks(9738),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            DriverId = 3L,
                            ExpirationDate = new DateTime(2020, 8, 4, 1, 50, 32, 93, DateTimeKind.Local).AddTicks(634),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            DriverId = 4L,
                            ExpirationDate = new DateTime(2020, 9, 17, 13, 44, 10, 930, DateTimeKind.Local).AddTicks(8841),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            DriverId = 5L,
                            ExpirationDate = new DateTime(2019, 11, 18, 12, 54, 54, 750, DateTimeKind.Local).AddTicks(3395),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            DriverId = 6L,
                            ExpirationDate = new DateTime(2019, 12, 7, 15, 20, 58, 418, DateTimeKind.Local).AddTicks(4008),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            DriverId = 7L,
                            ExpirationDate = new DateTime(2020, 7, 7, 6, 35, 20, 562, DateTimeKind.Local).AddTicks(2927),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            DriverId = 8L,
                            ExpirationDate = new DateTime(2020, 9, 21, 5, 43, 56, 400, DateTimeKind.Local).AddTicks(7066),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            DriverId = 9L,
                            ExpirationDate = new DateTime(2020, 7, 19, 6, 18, 58, 354, DateTimeKind.Local).AddTicks(9481),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            DriverId = 10L,
                            ExpirationDate = new DateTime(2020, 2, 6, 15, 49, 12, 609, DateTimeKind.Local).AddTicks(555),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DriverId");

                    b.Property<DateTime?>("EntryDate");

                    b.Property<DateTime?>("ExitDate");

                    b.Property<long>("RemittanceId");

                    b.Property<long>("TrailerId");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RemittanceId");

                    b.HasIndex("TrailerId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Entry");
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BoxHeight");

                    b.Property<double>("BoxLength");

                    b.Property<double>("BoxWeight");

                    b.Property<double>("BoxWidth");

                    b.Property<string>("Description");

                    b.Property<int>("DownloadedPallets");

                    b.Property<string>("ExternCode");

                    b.Property<long>("RemittanceId");

                    b.Property<int>("RequestedPallets");

                    b.Property<int>("TotalBoxes");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("Merchandise");
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CoverageType");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<string>("InsuredMerchandise");

                    b.Property<int>("PolicyNumber");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("SafetyMeasures");

                    b.HasKey("Id");

                    b.HasIndex("RemittanceId");

                    b.ToTable("MerchandiseInsurance");
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("DockId");

                    b.Property<DateTime>("DownloadFinishedAt");

                    b.Property<DateTime>("DownloadStartedAt");

                    b.Property<long>("EntryId");

                    b.Property<string>("MerchandiseState");

                    b.Property<long>("RemittanceId");

                    b.Property<string>("RemittanceState");

                    b.HasKey("Id");

                    b.HasIndex("DockId");

                    b.HasIndex("EntryId");

                    b.HasIndex("RemittanceId")
                        .IsUnique();

                    b.ToTable("OperationState");
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AmountOfBoxes");

                    b.Property<DateTime>("EntryTimestamp");

                    b.Property<DateTime>("ExitTimestamp");

                    b.Property<double>("Height");

                    b.Property<long>("MerchandiseId");

                    b.Property<string>("State");

                    b.Property<long>("WarehouseLocationId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("MerchandiseId");

                    b.HasIndex("WarehouseLocationId");

                    b.ToTable("Pallet");
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CertifiedBy");

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("RTO");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 8, 16, 12, 1, 13, 351, DateTimeKind.Local).AddTicks(3693),
                            VehicleId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 3, 4, 3, 36, 5, 986, DateTimeKind.Local).AddTicks(6485),
                            VehicleId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2019, 12, 24, 22, 58, 49, 798, DateTimeKind.Local).AddTicks(9486),
                            VehicleId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 9, 12, 14, 39, 14, 433, DateTimeKind.Local).AddTicks(7428),
                            VehicleId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 10, 2, 7, 23, 22, 131, DateTimeKind.Local).AddTicks(8091),
                            VehicleId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 1, 2, 8, 12, 43, 121, DateTimeKind.Local).AddTicks(5851),
                            VehicleId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 1, 27, 21, 16, 5, 491, DateTimeKind.Local).AddTicks(3681),
                            VehicleId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 3, 9, 11, 57, 54, 594, DateTimeKind.Local).AddTicks(4341),
                            VehicleId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 10, 22, 18, 28, 45, 613, DateTimeKind.Local).AddTicks(9373),
                            VehicleId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            CertifiedBy = "Ministerio de Transporte",
                            ExpirationDate = new DateTime(2020, 8, 17, 16, 44, 30, 802, DateTimeKind.Local).AddTicks(2373),
                            VehicleId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category");

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<long>("VehicleId");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("VehicleId");

                    b.ToTable("RUTA");
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ClientId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("DeliveryType");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Remittance");
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LicensePlate");

                    b.Property<long>("TrailerInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("TrailerInsuranceId");

                    b.ToTable("Trailer");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            LicensePlate = "51250-2000",
                            TrailerInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            LicensePlate = "26423",
                            TrailerInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            LicensePlate = "41587",
                            TrailerInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            LicensePlate = "12137-3604",
                            TrailerInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            LicensePlate = "90017",
                            TrailerInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            LicensePlate = "38492",
                            TrailerInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            LicensePlate = "31149-6219",
                            TrailerInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            LicensePlate = "19904",
                            TrailerInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            LicensePlate = "56390-8632",
                            TrailerInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            LicensePlate = "50863",
                            TrailerInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.TrailerInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("TrailerInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 4, 30, 21, 52, 41, 862, DateTimeKind.Local).AddTicks(7892),
                            InsuranceBusinessName = "Terry - Trantow",
                            PolicyNumber = 93395465
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 8, 26, 8, 10, 39, 88, DateTimeKind.Local).AddTicks(5010),
                            InsuranceBusinessName = "Klein, Wintheiser and Auer",
                            PolicyNumber = 33577081
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 9, 17, 0, 33, 49, 76, DateTimeKind.Local).AddTicks(9699),
                            InsuranceBusinessName = "Howe - Gutmann",
                            PolicyNumber = 7938399
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2020, 8, 20, 14, 6, 22, 124, DateTimeKind.Local).AddTicks(7468),
                            InsuranceBusinessName = "Wehner, Boyer and Cole",
                            PolicyNumber = 18054095
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 5, 3, 17, 8, 16, 298, DateTimeKind.Local).AddTicks(5734),
                            InsuranceBusinessName = "Murazik Group",
                            PolicyNumber = 35701699
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 3, 18, 19, 12, 29, 453, DateTimeKind.Local).AddTicks(7709),
                            InsuranceBusinessName = "Collins - Bins",
                            PolicyNumber = 31617192
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 9, 29, 1, 49, 24, 906, DateTimeKind.Local).AddTicks(4455),
                            InsuranceBusinessName = "Bode LLC",
                            PolicyNumber = 39643841
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 1, 10, 16, 52, 33, 716, DateTimeKind.Local).AddTicks(6903),
                            InsuranceBusinessName = "Beer - Gorczany",
                            PolicyNumber = 95712772
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 10, 10, 17, 54, 21, 385, DateTimeKind.Local).AddTicks(9983),
                            InsuranceBusinessName = "O'Keefe, Ziemann and Romaguera",
                            PolicyNumber = 37388263
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 3, 8, 0, 4, 23, 968, DateTimeKind.Local).AddTicks(1214),
                            InsuranceBusinessName = "Spinka - Sauer",
                            PolicyNumber = 17462075
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand");

                    b.Property<string>("LicensePlate");

                    b.Property<string>("Model");

                    b.Property<string>("Type");

                    b.Property<long>("VehicleInsuranceId");

                    b.HasKey("Id");

                    b.HasIndex("VehicleInsuranceId");

                    b.ToTable("Vehicle");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Brand = "Toyota",
                            LicensePlate = "81660-1169",
                            Model = "Taurus",
                            Type = "Extended Cab Pickup",
                            VehicleInsuranceId = 1L
                        },
                        new
                        {
                            Id = 2L,
                            Brand = "Dodge",
                            LicensePlate = "40091",
                            Model = "PT Cruiser",
                            Type = "Cargo Van",
                            VehicleInsuranceId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Brand = "Aston Martin",
                            LicensePlate = "14328-3530",
                            Model = "Grand Cherokee",
                            Type = "Extended Cab Pickup",
                            VehicleInsuranceId = 3L
                        },
                        new
                        {
                            Id = 4L,
                            Brand = "Maserati",
                            LicensePlate = "80378-0145",
                            Model = "Escalade",
                            Type = "Passenger Van",
                            VehicleInsuranceId = 4L
                        },
                        new
                        {
                            Id = 5L,
                            Brand = "Lamborghini",
                            LicensePlate = "76404-8100",
                            Model = "Explorer",
                            Type = "Hatchback",
                            VehicleInsuranceId = 5L
                        },
                        new
                        {
                            Id = 6L,
                            Brand = "Dodge",
                            LicensePlate = "71506",
                            Model = "Silverado",
                            Type = "Passenger Van",
                            VehicleInsuranceId = 6L
                        },
                        new
                        {
                            Id = 7L,
                            Brand = "Aston Martin",
                            LicensePlate = "06475",
                            Model = "Grand Caravan",
                            Type = "SUV",
                            VehicleInsuranceId = 7L
                        },
                        new
                        {
                            Id = 8L,
                            Brand = "Toyota",
                            LicensePlate = "27868-9035",
                            Model = "XTS",
                            Type = "Passenger Van",
                            VehicleInsuranceId = 8L
                        },
                        new
                        {
                            Id = 9L,
                            Brand = "Porsche",
                            LicensePlate = "00520-9414",
                            Model = "Accord",
                            Type = "SUV",
                            VehicleInsuranceId = 9L
                        },
                        new
                        {
                            Id = 10L,
                            Brand = "Hyandai",
                            LicensePlate = "86628-6340",
                            Model = "Impala",
                            Type = "Hatchback",
                            VehicleInsuranceId = 10L
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.VehicleInsurance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ExpirationDate");

                    b.Property<string>("InsuranceBusinessName");

                    b.Property<int>("PolicyNumber");

                    b.HasKey("Id");

                    b.ToTable("VehicleInsurance");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            ExpirationDate = new DateTime(2020, 8, 24, 2, 54, 13, 321, DateTimeKind.Local).AddTicks(7871),
                            InsuranceBusinessName = "Torphy Group",
                            PolicyNumber = 83138140
                        },
                        new
                        {
                            Id = 2L,
                            ExpirationDate = new DateTime(2020, 5, 23, 13, 26, 35, 77, DateTimeKind.Local).AddTicks(3582),
                            InsuranceBusinessName = "Will, Beer and Reinger",
                            PolicyNumber = 62901444
                        },
                        new
                        {
                            Id = 3L,
                            ExpirationDate = new DateTime(2020, 2, 4, 1, 37, 23, 192, DateTimeKind.Local).AddTicks(999),
                            InsuranceBusinessName = "Dare, Reynolds and Homenick",
                            PolicyNumber = 25605006
                        },
                        new
                        {
                            Id = 4L,
                            ExpirationDate = new DateTime(2020, 7, 25, 21, 30, 35, 963, DateTimeKind.Local).AddTicks(5927),
                            InsuranceBusinessName = "Lynch - Witting",
                            PolicyNumber = 73845416
                        },
                        new
                        {
                            Id = 5L,
                            ExpirationDate = new DateTime(2020, 7, 12, 12, 42, 33, 89, DateTimeKind.Local).AddTicks(7431),
                            InsuranceBusinessName = "Jakubowski - Cassin",
                            PolicyNumber = 83546402
                        },
                        new
                        {
                            Id = 6L,
                            ExpirationDate = new DateTime(2020, 6, 27, 22, 2, 18, 526, DateTimeKind.Local).AddTicks(5628),
                            InsuranceBusinessName = "Olson, Welch and Strosin",
                            PolicyNumber = 87209181
                        },
                        new
                        {
                            Id = 7L,
                            ExpirationDate = new DateTime(2020, 8, 21, 21, 22, 52, 546, DateTimeKind.Local).AddTicks(1274),
                            InsuranceBusinessName = "Balistreri - Gottlieb",
                            PolicyNumber = 38591587
                        },
                        new
                        {
                            Id = 8L,
                            ExpirationDate = new DateTime(2020, 10, 21, 20, 5, 24, 302, DateTimeKind.Local).AddTicks(6450),
                            InsuranceBusinessName = "Wolff Inc",
                            PolicyNumber = 87963311
                        },
                        new
                        {
                            Id = 9L,
                            ExpirationDate = new DateTime(2020, 10, 18, 16, 43, 14, 534, DateTimeKind.Local).AddTicks(6540),
                            InsuranceBusinessName = "Hahn - Schulist",
                            PolicyNumber = 40245058
                        },
                        new
                        {
                            Id = 10L,
                            ExpirationDate = new DateTime(2020, 5, 26, 20, 16, 21, 986, DateTimeKind.Local).AddTicks(6578),
                            InsuranceBusinessName = "Rutherford - Powlowski",
                            PolicyNumber = 62604819
                        });
                });

            modelBuilder.Entity("Web.Models.Domain.WarehouseLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aisle");

                    b.Property<string>("Level");

                    b.Property<string>("Position");

                    b.Property<string>("Section");

                    b.HasKey("Id");

                    b.ToTable("WarehouseLocation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Client", b =>
                {
                    b.HasOne("Web.Models.Domain.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.DriverPermit", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Entry", b =>
                {
                    b.HasOne("Web.Models.Domain.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Trailer", "Trailer")
                        .WithMany()
                        .HasForeignKey("TrailerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Merchandise", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany("Merchandise")
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.MerchandiseInsurance", b =>
                {
                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithMany()
                        .HasForeignKey("RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.OperationState", b =>
                {
                    b.HasOne("Web.Models.Domain.Dock", "Dock")
                        .WithMany()
                        .HasForeignKey("DockId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Entry", "Entry")
                        .WithMany()
                        .HasForeignKey("EntryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Remittance", "Remittance")
                        .WithOne("OperationState")
                        .HasForeignKey("Web.Models.Domain.OperationState", "RemittanceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Pallet", b =>
                {
                    b.HasOne("Web.Models.Domain.Merchandise", "Merchandise")
                        .WithMany("Pallets")
                        .HasForeignKey("MerchandiseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.WarehouseLocation", "WarehouseLocation")
                        .WithMany()
                        .HasForeignKey("WarehouseLocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RTO", b =>
                {
                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.RUTA", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Web.Models.Domain.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Remittance", b =>
                {
                    b.HasOne("Web.Models.Domain.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Trailer", b =>
                {
                    b.HasOne("Web.Models.Domain.TrailerInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("TrailerInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Web.Models.Domain.Vehicle", b =>
                {
                    b.HasOne("Web.Models.Domain.VehicleInsurance", "Insurance")
                        .WithMany()
                        .HasForeignKey("VehicleInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
